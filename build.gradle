buildscript {
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}
plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id "base"
    id "maven-publish"
}

//group 'sidev.lib.jvm'
//version '0.0.1xx'

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/alfalifr/SidevLib" }
}

def GROUP_ID= 'sidev.lib.jvm'
def ARTIFACT_ID= 'JVM_Lib'
def BINTRAY_REPOSITORY= 'JvmLib'
def BINTRAY_ORGINIZATION= ""
def ISSUE_URL= ""
def SITE_URL= ""
def VCS_URL= "https://github.com/alfalifr/SidevLibKt/tree/master/StdLib"
def LIBRARY_VERSION_NAME= '0.0.1xx'

//group GROUP_ID
version LIBRARY_VERSION_NAME

//apply plugin : "maven-publish"
apply plugin: 'com.jfrog.bintray'


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile group: 'junit', name: 'junit', version: '4.12'

    implementation "sidev.lib.kotlin.multi:StdLib-jvm:0.0.1x"
    implementation("org.apache.commons:commons-lang3:3.6")
}


/*
==================
Template Task
==================
 */

afterEvaluate {
    project.publishing.publications.all {
        // rename artifacts
        groupId = GROUP_ID
        if (it.name.contains('metadata')) {
            artifactId = "$ARTIFACT_ID"
        } else {
            artifactId = "$ARTIFACT_ID-$name"
        }
/*
        for(arti in it.artifacts){
            if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                && arti.classifier == "sources"){
                def file= (File) arti.file
                try{
                    file.writable= true
                    def pw= new PrintWriter(file)
                    pw.println("blank")
                    pw.close()
                    println "artifact $arti file is changed: file in ${file.name}"
                } catch(e){
                    println "ERROR when modifying artifact $arti file: file in ${file.name}"
                    println "  e= $e"
                }
            }
        }
 */
    }
}

def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
}

bintray {
    //A user name of bintray to A, and API key of Bintray to B.I do not want to include API Key in git,
    // so I am gradle.properties writing locally.
    // Gradle's property file is read in the order of gradle in the home directory> gradle in the project directory,
    // so if it is written in property in the home directory, it will be useful for other projects as well.
    user = getBintrayUserProperty()
    key = getBintrayApiKeyProperty()
    //f you set publish to true, the new version will be published the moment you upload to bintray. If false, it will not be published unless you press the publish button on the bintray web.
    // It is recommended that you make it false because it can prevent an accident that you accidentally release the latest version.
    publish = false

    pkg {
        repo = BINTRAY_REPOSITORY
        name = ARTIFACT_ID
        userOrg = BINTRAY_ORGINIZATION
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = SITE_URL
        issueTrackerUrl = ISSUE_URL

        version {
            name = LIBRARY_VERSION_NAME
            vcsTag = LIBRARY_VERSION_NAME
            released = new Date()
        }
    }
}

// This specifies the publications to upload to bintray before doing the bintrayUpload gradle task.
//In the mpp configuration of one module after 1.3,
// it is not uploaded unless you explicitly specify artifacts in publications like this.
// It is not necessary to have the findAll part,
// [project name]-kotlinMultiplatformbut a directory containing only pom files will be uploaded, so it is better to exclude it.
bintrayUpload.doFirst {
    publications = publishing.publications.collect {
        it.name
    }.findAll {
        it != "kotlinMultiplatform"
    }
/*
    project.publishing.publications.all {
        for(arti in it.artifacts){
            if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                    && arti.classifier == "sources"){
                def file= (File) arti.file
                println "artifact $arti file is about to be changed: file in ${file.path}"
                try{
                    file.writable= true
                    def pw= new PrintWriter(file)
                    pw.println("blank")
                    pw.close()
                    println "artifact $arti file is changed: file in ${file.path}"
                } catch(e){
                    println "ERROR: when modifying artifact $arti file: file in ${file.path}"
                    println "  e= $e"
                }
            }
        }
    }
 */
}
///*
task modifySource{
    doFirst {
        project.publishing.publications.all {
            for(arti in it.artifacts){
                if(arti.class.name == "org.gradle.api.publish.maven.internal.artifact.PublishArtifactBasedMavenArtifact_Decorated"
                        && arti.classifier == "sources"){
                    def file= (File) arti.file
                    println "artifact $arti file is about to be changed: file in ${file.path}"
                    try{
                        file.writable= true
                        def pw= new PrintWriter(file)
                        pw.println("blank")
                        pw.close()
                        println "artifact $arti file is changed: file in ${file.path}"
                    } catch(e){
                        println "ERROR: when modifying artifact $arti file: file in ${file.path}"
                        println "  e= $e"
                    }
                }
            }
        }
    }
}
// */

//The task of bintrayUpload depends on publishToMavenLocal set in the previous section.
// This will create maven artifacts when running bintrayUplaod's task.
modifySource.dependsOn publishToMavenLocal
bintrayUpload.dependsOn publishToMavenLocal
bintrayUpload.dependsOn modifySource